@using System.Runtime.Remoting
@using CmsData
@using CmsData.Codes
@using CmsWeb
@using CmsWeb.Models.ExtraValues
@using UtilityExtensions
@model CmsWeb.Areas.People.Models.MemberInfo
@{
    var editable = new
    {
        url = "/Person2/InlineEdit/" + Model.PeopleId,
        source = "/Person2/InlineCodes/"
    };
    var evmodel = new ExtraValueModel(Model.PeopleId, "People", "Membership");
    var ExtraMembershipDataLabel = DbUtil.Db.Setting("ExtraMembershipDataLabel", "Extra Membership Data");
    var NewMemberClassLabel = DbUtil.Db.Setting("NewMemberClassLabel", "New Member Class");
}
<form class="ajax" method="post" data-init="Editable" data-init2="ExtraEditable">
    <h3>Member Profile</h3>
    @FormAction()
    <h4>Statement/Envelope Options</h4>
    <div class="well">
        @if (User.IsInRole("Membership") || Model.person.CanUserSeeGiving)
        {
            @Html.EditorFor(m => m.ElectronicStatement, "InlineBoolean", editable)
            @Html.EditorFor(m => m.ContributionOptions, "InlineCodeInfo", editable)
            @Html.EditorFor(m => m.EnvelopeOptions, "InlineCodeInfo", editable)
        }
        else
        {
            @Html.DisplayFor(m => m.ElectronicStatement)
            @Html.DisplayFor(m => m.ContributionOptions)
            @Html.DisplayFor(m => m.EnvelopeOptions)
        }
    </div>
    <h4>Decision</h4>
    <div class="well">
        @Html.DisplayFor(m => m.DecisionType)
        @Html.DisplayFor(m => m.DecisionDate)
    </div>
    <h4>Baptism</h4>
    <div class="well">
        @Html.DisplayFor(m => m.BaptismType)
        @Html.DisplayFor(m => m.BaptismStatus)
        @Html.DisplayFor(m => m.BaptismDate)
        @Html.DisplayFor(m => m.BaptismSchedDate)
    </div>
    <h4>@NewMemberClassLabel</h4>
    <div class="well">
        @Html.DisplayFor(m => m.NewMemberClassStatus)
        @Html.DisplayFor(m => m.NewMemberClassDate)
    </div>
    <div class="row-fluid display">
        <fieldset class="left-gutter">
            <legend>Member Profile @FormAction()</legend>
            <div class="inline align-top">
                <div class="well">
                    <p><b>Statement/Envelope Options</b></p>
                    @if (User.IsInRole("Membership") || Model.person.CanUserSeeGiving)
                    {
                        @Html.EditorFor(m => m.ElectronicStatement, "InlineBoolean", editable) 
                        @Html.EditorFor(m => m.ContributionOptions, "InlineCodeInfo", editable)
                        @Html.EditorFor(m => m.EnvelopeOptions, "InlineCodeInfo", editable)
                    }
                    else
                    {
                        @Html.DisplayFor(m => m.ElectronicStatement)
                        @Html.DisplayFor(m => m.ContributionOptions)
                        @Html.DisplayFor(m => m.EnvelopeOptions)
                    }
                </div>
                <div class="well">
                    <p><b>Decision</b></p>
                    @Html.DisplayFor(m => m.DecisionType)
                    @Html.DisplayFor(m => m.DecisionDate)
                </div>
                <div class="well">
                    <p><b>Baptism</b></p>
                    @Html.DisplayFor(m => m.BaptismType)
                    @Html.DisplayFor(m => m.BaptismStatus)
                    @Html.DisplayFor(m => m.BaptismDate)
                    @Html.DisplayFor(m => m.BaptismSchedDate)
                </div>
                <div class="well">
                    <p><b>@NewMemberClassLabel</b></p>
                    @Html.DisplayFor(m => m.NewMemberClassStatus)
                    @Html.DisplayFor(m => m.NewMemberClassDate)
                </div>
            </div>
            <div class="inline align-top left-gutter">
                <div class="well">
                    <p><b>Church Membership</b></p>
                    @Html.DisplayFor(m => m.MemberStatus)
                    @Html.DisplayFor(m => m.JoinType)
                    @Html.DisplayFor(m => m.JoinDate)
                    @Html.DisplayFor(m => m.OtherPreviousChurch)
                </div>
                <div class="well">
                    <p><b>Drop</b></p>
                    @Html.DisplayFor(m => m.DropType)
                    @Html.DisplayFor(m => m.DropDate)
                    @Html.DisplayFor(m => m.OtherNewChurch)
                </div>
                <div class="well maxWidthMedium">
                    <p><b>Letter Status</b></p>
                    @Html.DisplayFor(m => m.LetterStatus)
                    @Html.DisplayFor(m => m.LetterDateRequested)
                    @Html.DisplayFor(m => m.LetterDateReceived)
                    @if (User.IsInRole("Access"))
                    {
                        @Html.DisplayFor(m => m.LetterStatusNotes)
                    }
                </div>
            </div>
            <div class="legend">
                @ExtraMembershipDataLabel
                @if (User.IsInRole("Admin"))
                {
                    <a class="extravalue nounderline font18px dark pad-left" href="/ExtraValue/NewStandard/@evmodel.Table/Membership/@evmodel.Id"><i class="fa fa-plus"></i></a>
                    <a class="extravalue nounderline font14px edit pad-left dark" href="/ExtraValue/ListStandard/@evmodel.Table/Membership/@evmodel.Id?title=Edit+Membership+Extra+Vaues"><i class="fa fa-pencil"></i></a>
                }
            </div>
            <a href="#" class="pull-right ajax-refresh"><i class="fa fa-refresh"></i></a>
            <div class="table">
                @{
                    var list = evmodel.GetExtraValues().ToList(); 
                }
                @foreach (var f in list)
                {
                    if (f.Type == "Header" || f == list[0]) // if this is a header or the first item, start the well
                    {
                        if (f != list[0]) // if not on the first item, close the previous well
                        {
                            @Html.Raw("</div>")
                        }
                        @Html.Raw("<div class='well'>")
                    }
                    @Html.EditorFor(m => f)
              
                    if (f == list.Last()) // if this was the last item, close the well
                    {
                        @Html.Raw("</div>")
                    }
                }
            </div>
        </fieldset>
    </div>
    <input type="hidden" id="StandardExtraValueReload" value="/ExtraValue/Display/@evmodel.Table/Membership/@evmodel.Id" />
    @if (User.IsInRole("Access"))
    {
        <table class="@ViewExtensions2.GridClass">
            <thead>
                <tr><td>Status Flag</td><td>Name</td></tr>
            </thead>
            <tbody>
                @foreach (var s in Model.StatusFlags())
                {
                    <tr><td>@s.Flag</td><td>@s.Name @s.Role</td></tr>
                }
            </tbody>
        </table>
    }
</form>


@helper FormAction()
{
    if (User.IsInRole("Membership"))
    {
        <div class="row hidden-xs">
            <div class="col-sm-12">
                <div class="pull-right">
                    @if (Model.MemberStatus.Value.ToInt() == MemberStatusCode.JustAdded)
                    {
                        <a href="/Person2/JustAddedNotMember/@Model.PeopleId" class="btn btn-default ajax">Set Just Added to Not Member</a>
                    }
                    <a href="/Person2/MembershipEdit/@Model.PeopleId" class="edit-basic btn btn-default ajax"><i class="fa fa-pencil"></i> Edit</a>
                </div>
            </div>
        </div>
    }
}
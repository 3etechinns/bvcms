@using CmsData.Registration
@using CmsWeb
@model CmsWeb.Models.OnlineRegPersonModel
@{ 
    var prefix = ViewData.TemplateInfo.HtmlFieldPrefix;
    var checkoxesAdded = false;
}
@foreach(var ask in Model.setting.AskItems)
{
	switch (ask.Type)
	{
        case "AskSize":
	        @Html.HiddenFor2(m => m.shirtsize);
        break;
        case "AskRequest":
            @Html.HiddenFor2(m => m.request);
            break;
        case "AskEmContact":
            @Html.HiddenFor2(m => m.emcontact);
            @Html.HiddenFor2(m => m.emphone);
            break;
        case "AskInsurance":
            @Html.HiddenFor2(m => m.insurance);
            @Html.HiddenFor2(m => m.policy);
            break;
        case "AskDoctor":
            @Html.HiddenFor2(m => m.doctor);
            @Html.HiddenFor2(m => m.docphone);
            break;
        case "AskAllergies":
            var allergyname = Html.NameFor2(m => m.medical);
			<input type="hidden" name="@(allergyname)" value="@Model.medical" />
            break;
        case "AskTylenolEtc":
            @Html.HiddenFor2(m => m.tylenol)
            @Html.HiddenFor2(m => m.advil)
            @Html.HiddenFor2(m => m.maalox)
            @Html.HiddenFor2(m => m.robitussin)
            break;
        case "AskParents":
            @Html.HiddenFor2(m => m.mname)
            @Html.HiddenFor2(m => m.fname)
            break;
        case "AskCoaching":
            @Html.HiddenFor2(m => m.coaching)
            break;
        case "AskChurch":
            @Html.HiddenFor2(m => m.memberus)
            @Html.HiddenFor2(m => m.otherchurch)
            break;
        case "AskTickets":
            @Html.HiddenFor2(m => m.ntickets)
            break;
        case "AskSuggestedFee":
	        try 
            { var h = Html.HiddenFor2(m => m.Suggestedfee); 
              @h 
            }
	        catch (Exception) { }
            break;
        case "AskDropdown":
            <input type="hidden" name="@(prefix).option" value="@(((AskDropdown)ask).SmallGroupChoice(Model.option).SmallGroup)"/>
            break;
        case "AskExtraQuestions":
	        var eq = (AskExtraQuestions) ask;
            var eqname = Html.NameFor2(m => m.ExtraQuestion);
    		for (int n = 0; n < eq.list.Count; n++)
    		{
    			var a = eq.list[n];
    			<input type="hidden" name="@(eqname)[@eq.UniqueId][@n].Key" value="@a.Question" />
    			<input type="hidden" name="@(eqname)[@eq.UniqueId][@n].Value" value="@Model.ExtraQuestionValue(eq.UniqueId, a.Question)" />
    		}
            break;
        case "AskYesNoQuestions":
            for (int n = 0; n < ((AskYesNoQuestions)ask).list.Count; n++)
            {
                var a = ((AskYesNoQuestions)ask).list[n];
    			<input type="hidden" name="@(prefix).YesNoQuestion[@n].Key" value="@a.SmallGroup" />
    			<input type="hidden" name="@(prefix).YesNoQuestion[@n].Value" value="@(Model.YesNoQuestion[a.SmallGroup] == true ? "true" : "false")" />
            }
            break;
        case "AskCheckboxes":
            if(!checkoxesAdded)
            {
    			var cbname = Html.NameFor(m => m.Checkbox);
                foreach(var sg in Model.Checkbox)
                { 
                <input type="hidden" name="@cbname" value="@sg"/>
                }
    	        checkoxesAdded = true;
            }
        break;
         case "AskMenu":
            var nn = 0;
			foreach (var i in ((AskMenu)ask).MenuItemsChosen(Model.MenuItem))
			{
    			<input type="hidden" name="@(prefix).MenuItem[@nn].Key" value="@i.sg" />
				<input type="hidden" name="@(prefix).MenuItem[@(nn++)].Value" value="@Model.MenuItemValue(i.sg)" />
			}
            break;
        case "AskGradeOptions":
            @Html.HiddenFor2(m => m.gradeoption)
            break;
	}
}
@if (Model.OnlineGiving())
{
    var funame = Html.NameFor(m => m.FundItem);
		int fn = 0;
		foreach (var i in Model.FundItemsChosen())
		{
    		<input type="hidden" name="@(funame)[@fn].Key" value="@i.fundid" />
			<input type="hidden" name="@(funame)[@(fn++)].Value" value="@i.amt" />
		}
}
@if (Model.setting.Deposit > 0)
{ 
    @Html.HiddenFor2(m => m.paydeposit)
}
    @Html.HiddenFor2(m => m.CreatingAccount)
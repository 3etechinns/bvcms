@using UtilityExtensions
@model DateTime?
@{
    var fmt = "{0:d}";
    var s = "";
    if (Model != null)
    {
        if (Model.Value.TimeOfDay.Ticks > 0)
        {
            s = Model.Value.FormatDateTm();
            fmt = "{0:g}";

        }
        else
        {
            s = Model.FormatDate();
        }
    }
}
<div class="form-group @ViewBag.height33 @ViewBag.hide">
    @Html.LabelFor(m => m, new { @class = "control-label" })
    <div class="controls">
        <div class="input-group date">
            @Html.TextBoxFor2(m => m, useNativeUnobtrusiveAttributes: true, format: @fmt, htmlAttributes: new { @class = "form-control" })<span class="input-group-addon hidden-xs hidden-sm"><i class="fa fa-calendar"></i></span>
            <input type="hidden" id="@Html.IdForModel()Iso" disabled="disabled" value="@(Model.HasValue ? Model.GetValueOrDefault().ToString("yyyy-MM-dd") : "")" />
        </div>
        <span class="help-block">@Html.Raw(ViewData["help"])</span>
        @Html.ValidationMessageLabelFor(m => m)
        @if (ViewBag.ShowHelp != false && ViewData.ModelMetadata.Description.HasValue())
        {
            <div class="alert alert-info">@Html.Markdown(ViewData.ModelMetadata.Description)</div>
        }
    </div>
</div>